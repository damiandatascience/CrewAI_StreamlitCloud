import streamlit as st
from crewai import Crew, Agent, Task 
from langchain_openai import ChatOpenAI
import io

# Configurar la interfaz de Streamlit
st.title('Generador de Art칤culos con CrewAI (usando GPT-3.5 Turbo)游땕')

# Entrada para la clave de API de OpenAI
openai_api_key = st.text_input("Ingrese su clave de API de OpenAI:", type="password")

# Entrada para el tema del art칤culo
topic = st.text_input('Ingrese el tema del art칤culo:')

# Funci칩n para crear el LLM
def create_llm(api_key):
    return ChatOpenAI(
        model_name="gpt-3.5-turbo",
        temperature=0.8,
        openai_api_key=api_key
    )

# Definir agentes 
def create_agents(llm):
    investigador = Agent(
        role="Investigador de contenido",
        goal=f"Investigar contenido atractivo y rigurosamente preciso sobre {topic}",
        backstory=f"Est치s trabajando en la planificaci칩n de un art칤culo sobre el tema {topic}. "
              "Recopilas informaci칩n que ayuda a la audiencia a aprender algo y a tomar decisiones "
              "informadas. Tu trabajo es la base para que el escritor de contenido escriba un art칤culo sobre este tema.",
        allow_delegation=False,
        verbose=True,
        llm=llm
    )
    escritor = Agent(
        role="Escritor de contenido",
        goal=f"Escribir un art칤culo de opini칩n perspicaz y rigurosamente preciso sobre el tema: {topic}",
        backstory=f"Est치s trabajando en escribir un nuevo art칤culo de opini칩n sobre el tema: {topic}. "
              "Basas tu escritura en el trabajo realizado por el investigador de contenido, quien proporcion칩 "
              "un esquema ordenado y dio contexto relevante sobre el tema. Sigues el objetivo principal "
              "y la direcci칩n del esquema proporcionado por el investigador de contenido. Tambi칠n proporcionas "
              "an치lisis objetivos e imparciales y los respaldas con informaci칩n proporcionada por el "
              "investigador de contenido. Ten en cuenta que reconoces que es tu art칤culo de opini칩n cuando tus "
              "afirmaciones son opiniones en lugar de declaraciones objetivas.",
        allow_delegation=False,
        verbose=True,
        llm=llm
    )

    editor = Agent(
        role="Editor de contenido",
        goal="Editar un art칤culo dado para alinearlo con el estilo de escritura de la organizaci칩n",
        backstory="Eres un editor que recibe un art칤culo de blog del escritor de contenido. Tu objetivo "
              "es revisar el art칤culo para asegurarte de que sigue las mejores pr치cticas period칤sticas, proporciona "
              "puntos de vista equilibrados al expresar opiniones o afirmaciones y tambi칠n evita temas u opiniones "
              "controvertidas importantes cuando sea posible.",
        allow_delegation=False,
        verbose=True,
        llm=llm
    )
    return investigador, escritor, editor

# Definir tareas
def create_tasks(topic, investigador, escritor, editor):
    investigar = Task(
        description=(f"1. Dar prioridad a las 칰ltimas tendencias, actores clave y noticias destacadas "
                     f"sobre {topic}.\n"
                     "2. Identificar al p칰blico objetivo considerando sus intereses y necesidades.\n"
                     "3. Desarrollar un esquema de contenido detallado que incluya una introducci칩n, "
                     "puntos clave, una llamada a la acci칩n y fuentes relevantes.\n"
                     "4. Incluir palabras clave de SEO, datos y fuentes relevantes."),
        expected_output="Un documento de plan de contenido completo con un esquema, an치lisis de audiencia, "
                        "palabras clave de SEO y fuentes relevantes.",
        agent=investigador
    )
    escribir = Task(
        description=(f"1. Usa el plan de contenido para crear un art칤culo convincente sobre {topic}.\n"
                     "2. Incorpora palabras clave de SEO de manera natural.\n"
                     "3. Nombra las secciones o subt칤tulos de manera profesional.\n"
                     "4. Aseg칰rate de que la publicaci칩n est칠 estructurada con una "
                     "introducci칩n atractiva, un cuerpo informativo y una conclusi칩n resumida.\n"
                     "5. Revisa en busca de errores gramaticales y aseg칰rate de que "
                     "est칠 alineado con la voz de la marca."),
        expected_output="Un art칤culo bien escrito en formato markdown, "
                        "cada secci칩n deber칤a tener 2 o 3 p치rrafos listos para publicar.",

        agent=escritor
    )
    editar = Task(
        description=("Revisa el art칤culo dado en busca de errores gramaticales "
                     "y aseg칰rate de que est칠 alineado con la voz de la marca."),
        expected_output="Un art칤culo bien escrito y listo para publicaci칩n, "
                        "cada secci칩n debe tener entre 2 o 3 p치rrafos."
                        "el articulo debe esta en idioma espa침ol verifica esto y debe contener las fuentes relevantes",
        agent=editor
    )
    return [investigar, escribir, editar]

# Funci칩n para generar el art칤culo
def generate_article(openai_api_key, topic):
    llm = create_llm(openai_api_key)
    investigador, escritor, editor = create_agents(llm)
    crew = Crew(
        agents=[investigador, escritor, editor],
        tasks=create_tasks(topic, investigador, escritor, editor),
        verbose=2
    )
    return crew.kickoff()

# Funci칩n para descargar el art칤culo
def download_article(article_text):
    buffer = io.BytesIO()
    buffer.write(article_text.encode())
    buffer.seek(0)
    return buffer

# Interfaz principal
if st.button('Generar Art칤culo'):
    if openai_api_key and topic:
        try:
            with st.spinner('Generando art칤culo...'):
                result = generate_article(openai_api_key, topic)
                
                # Mostrar el resultado
                st.subheader('Art칤culo Generado:')
                st.write(result)
                
                # Bot칩n de descarga
                st.download_button(
                    label="Descargar Art칤culo",
                    data=download_article(result),
                    file_name=f"articulo_{topic.replace(' ', '_')}.txt",
                    mime="text/plain"
                )
        except Exception as e:
            st.error(f"Ocurri칩 un error: {str(e)}")
    elif not openai_api_key:
        st.warning('Por favor, ingrese su clave de API de OpenAI.')
    elif not topic:
        st.warning('Por favor, ingrese un tema para el art칤culo.')
    else:
        st.warning('Por favor, complete todos los campos requeridos.')

# Instrucciones de uso
st.markdown("""
## Instrucciones de uso:
1. Ingrese su clave de API de OpenAI en el campo correspondiente.
2. Escriba el tema sobre el que desea generar un art칤culo.
3. Haga clic en 'Generar Art칤culo' y espere a que se complete el proceso.
4. Una vez generado el art칤culo, use el bot칩n 'Descargar Art칤culo' para guardarlo en su dispositivo.

Nota: Su clave de API se utiliza de forma segura y no se almacena en ning칰n lugar.
Este programa utiliza el modelo GPT-3.5 Turbo de OpenAI.
""")